{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","className","MovieGenres","_ref3","genre","Movie","_ref","title","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","console","log","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","response","json","data","catch","err","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAmEA,SAASA,EAATC,GAAoC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAC3B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,UAAU,kBAI9C,SAASC,EAATC,GAA8B,IAAPC,EAAOD,EAAPC,MACnB,OACIP,EAAAC,EAAAC,cAAA,QAAME,UAAU,gBAAgBG,GAsBzBC,MAvEf,SAAAC,GAAiD,IAAjCC,EAAiCD,EAAjCC,MAAOZ,EAA0BW,EAA1BX,OAAQa,EAAkBF,EAAlBE,OAAQC,EAAUH,EAAVG,SACnC,OACIZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACXJ,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKW,KAEtCV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACXJ,EAAAC,EAAAC,cAAA,UAAKQ,GACLV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACVO,EAAOE,IAAI,SAACN,EAAOO,GAAR,OAAkBd,EAAAC,EAAAC,cAACG,EAAD,CAAaE,MAAOA,EAAOQ,IAAKD,OAElEd,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACXJ,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACAgB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBC4BbC,6MA7CbC,MAAQ,KAMRC,cAAgB,WAWd,OAVeC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GAEnC,OADAC,QAAQC,IAAIF,GACL3B,EAAAC,EAAAC,cAAC4B,EAAD,CACPpB,MAAOiB,EAAMI,cACbjC,OAAQ6B,EAAMK,mBACdjB,IAAKY,EAAMM,GACXtB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAMpBsB,gCAAa,SAAAC,IAAA,IAAAT,EAAA,OAAAU,EAAAnC,EAAAoC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUf,EAAKgB,WADf,OACLf,EADKY,EAAAI,KAEXjB,EAAKkB,SAAS,CACZjB,WAHS,wBAAAY,EAAAM,SAAAT,EAAAU,WAObJ,SAAW,WACT,OAAOK,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKxB,SACvByB,MAAM,SAAAC,GAAG,OAAIxB,QAAQC,IAAIuB,yFA5B1BP,KAAKX,8CA+BE,IAECR,EAAWmB,KAAKtB,MAAhBG,OACR,OACE1B,EAAAC,EAAAC,cAAA,OAAKE,UAAWsB,EAAS,MAAQ,gBAC7BA,EAASmB,KAAMrB,gBAAkB,WADrC,YA5CY6B,aCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.5237da5b.chunk.js","sourcesContent":["import React/*, { Component }*/ from 'react'; \n\nimport PropTypes from 'prop-types'\n\nimport './Movie.css'\n\nimport LinesEllipsis from 'react-lines-ellipsis'\n\n// class Movie extends Component{\n\n//     static propTypes = { //type check 부모 컴포넌트에서 얻는 정보의 종류가 무엇인지, 있는지 없는지 알 수 있다.\n//         title: propTypes.string.isRequired,\n//         poster: propTypes.string.isRequired\n//     }\n\n//     render(){\n//         return(\n//             <div>\n//                 <MoviePoster poster={this.props.poster} />\n//                 <h1>{this.props.title}</h1>\n//             </div>\n//         )\n//     }\n// }\n\n//1\nfunction Movie({title, poster, genres, synopsis}){\n    return(\n        <div className=\"Movie\">\n            <div className=\"Movie__Column\">\n                <MoviePoster poster={poster} alt={title} />\n            </div>\n            <div className=\"Movie__Column\">\n                <h1>{title}</h1>\n                <div className=\"Movie__Genres\">\n                    {genres.map((genre, index) => <MovieGenres genre={genre} key={index} />)}\n                </div>\n                <div className=\"Movie__Synopsis\">\n                    <LinesEllipsis\n                    text={synopsis}\n                    maxLine='3'\n                    ellipsis='...'\n                    trimRight\n                    basedOn='letters'\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\n// class MoviePoster extends Component{\n\n//     static propTypes = {\n//         poster: propTypes.string.isRequired\n//     }\n\n//     render(){\n//         return(\n//             <img src={this.props.poster} />\n//         )\n//     }\n// }\n\n\n//2\nfunction MoviePoster ({poster, alt}){    //functional 컴포넌트 (state가 없음! only have return)\n    return (\n        <img src={poster} alt={alt} className=\"Movie__Poster\" />\n    )\n}\n\nfunction MovieGenres ({genre}){\n    return(\n        <span className=\"Movie__Genre\">{genre}</span>\n    )\n}\n\n\n//3\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired\n}\n\nMoviePoster.propTypes = { // pure컴포넌트 prop types 확인\n    poster: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired\n}\n\nMovieGenres.propTypes = {\n    genre: PropTypes.string.isRequired\n}\n\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie'  /* Movie component */\n\n// const movieTitles = [\n//   \"Matrix\",\n//   \"Full Metal Jacket\",\n//   \"Oldboy\",\n//   \"Star Wars\"\n// ]//전역변수\n\n// const movieImages = [\n//   \"https://images-na.ssl-images-amazon.com/images/I/51EG732BV3L._SY445_.jpg\",\n//   \"https://is2-ssl.mzstatic.com/image/thumb/Video/v4/52/4b/d9/524bd9ea-e781-339f-6d07-5725c00d6b21/pr_source.lsr/268x0w.png\",\n//   \"https://images-na.ssl-images-amazon.com/images/I/91ONQ8FNHJL._SY445_.jpg\",\n//   \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRoBq5af1KcwELZNebyBPZR0Vbywc71omi5oe7NqsoPv3J2cDFGAw\"\n// ]\n\n\n\nclass App extends Component {\n\n  // componentWillMount() {\n  //   console.log('will mount');\n  // }\n \n  state = {}  \n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      console.log(movie)\n      return <Movie\n      title={movie.title_english}\n      poster={movie.medium_cover_image}\n      key={movie.id}\n      genres={movie.genres}\n      synopsis={movie.synopsis}\n      />// props추가\n    })\n    return movies;\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi() //await (callApi기능이 끝나기를 기다림) -> 결과(성공/실패 상관x) 리턴 movies에\n    this.setState({\n      movies  //state를 movies로 설정\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  render() {\n    // console.log('did render')\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n         {movies ? this. _renderMovies() : 'Loadings'} {/* state가 movies면 _renderMovies라는 function을 불러옴*/}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n//리액트DOM이 render(출력)한다. 컴포넌트 app을, ID가 root인 곳에. \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}